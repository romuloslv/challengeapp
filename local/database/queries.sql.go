// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (person_id, first_name, last_name, web_address, date_birth)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, person_id, first_name, last_name, web_address, date_birth
`

type CreateAccountParams struct {
	PersonID   string
	FirstName  string
	LastName   string
	WebAddress sql.NullString
	DateBirth  sql.NullString
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.PersonID,
		arg.FirstName,
		arg.LastName,
		arg.WebAddress,
		arg.DateBirth,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.WebAddress,
		&i.DateBirth,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, person_id, first_name, last_name, web_address, date_birth
FROM accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.WebAddress,
		&i.DateBirth,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, person_id, first_name, last_name, web_address, date_birth
FROM accounts
ORDER BY first_name
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.PersonID,
			&i.FirstName,
			&i.LastName,
			&i.WebAddress,
			&i.DateBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const partialUpdateAccount = `-- name: PartialUpdateAccount :one
UPDATE accounts
SET person_id   = CASE WHEN $1::boolean THEN $2::VARCHAR(11) ELSE person_id END,
    first_name  = CASE WHEN $3::boolean THEN $4::VARCHAR(30) ELSE first_name END,
    last_name   = CASE WHEN $5::boolean THEN $6::VARCHAR(20) ELSE last_name END,
    web_address = CASE WHEN $7::boolean THEN $8::VARCHAR(50) ELSE web_address END,
    date_birth  = CASE WHEN $9::boolean THEN $10::VARCHAR(10) ELSE date_birth END
WHERE id = $11
RETURNING id, person_id, first_name, last_name, web_address, date_birth
`

type PartialUpdateAccountParams struct {
	UpdatePersonID   bool
	PersonID         string
	UpdateFirstName  bool
	FirstName        string
	UpdateLastName   bool
	LastName         string
	UpdateWebAddress bool
	WebAddress       string
	UpdateDateBirth  bool
	DateBirth        string
	ID               int64
}

func (q *Queries) PartialUpdateAccount(ctx context.Context, arg PartialUpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, partialUpdateAccount,
		arg.UpdatePersonID,
		arg.PersonID,
		arg.UpdateFirstName,
		arg.FirstName,
		arg.UpdateLastName,
		arg.LastName,
		arg.UpdateWebAddress,
		arg.WebAddress,
		arg.UpdateDateBirth,
		arg.DateBirth,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.WebAddress,
		&i.DateBirth,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET person_id   = $2,
    first_name  = $3,
    last_name   = $4,
    web_address = $5,
    date_birth  = $6
WHERE id = $1
RETURNING id, person_id, first_name, last_name, web_address, date_birth
`

type UpdateAccountParams struct {
	ID         int64
	PersonID   string
	FirstName  string
	LastName   string
	WebAddress sql.NullString
	DateBirth  sql.NullString
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.PersonID,
		arg.FirstName,
		arg.LastName,
		arg.WebAddress,
		arg.DateBirth,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.WebAddress,
		&i.DateBirth,
	)
	return i, err
}
